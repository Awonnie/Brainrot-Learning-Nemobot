{"thirdPartyDependencies":[],"code":"async function startup(state, tools) {\n  tools.reply(\"Hello! Welcome to Brainrot Learning Assistant. I can help you either:\");\n  tools.reply(\"1. Create an educational conversation from your PDF\");\n  tools.reply(\"2. Generate a summary of your PDF content\");\n  state.awaitingChoice = true;\n  state.awaitingDuration = false;\n  state.awaitingUpload = false;\n  state.awaitingSummaryPrefs = false;\n}\n\nasync function run(payload, state, tools) {\n  const userResponse = payload.toLowerCase().trim();\n  \n  // Initial state - ask user what they want to do\n  if (state.awaitingChoice) {\n    if (userResponse.includes('1') || userResponse.includes('conversation')) {\n      tools.reply(\"Great! Let's create an educational conversation.\");\n      tools.reply(\"How long would you like the generated conversation to be? (e.g., '1 minute', '5 minutes')\");\n      state.awaitingDuration = true;\n      state.awaitingChoice = false;\n      state.mode = 'conversation';\n    } else if (userResponse.includes('2') || userResponse.includes('summary')) {\n      tools.reply(\"Great! Let's generate a summary of your PDF.\");\n      tools.reply([\n        \"What type of summary would you like?\",\n        \"- 'concise' (3-5 sentences)\",\n        \"- 'detailed' (point-by-point)\"\n      ].join(\"\\n\"));\n      state.awaitingSummaryPrefs = true;\n      state.awaitingChoice = false;\n      state.mode = 'summary';\n    } else {\n      tools.reply(\"Please choose either '1' for conversation or '2' for summary\");\n    }\n    return;\n  }\n  \n  // Get conversation duration from user\n  if (state.awaitingDuration && state.mode === 'conversation') {\n    if (userResponse.includes(\"minute\") || userResponse.match(/\\d/)) {\n      state.duration = userResponse;\n      tools.reply(`Got it! I'll generate a ${state.duration} conversation.`);\n      tools.reply([\n        \"Please visit this link to upload your PDF:\",\n        \"https://brainrot-learning-4052.uc.r.appspot.com/\",\n        \"After uploading, come back here and type 'done' to get your audio link.\"\n      ].join(\"\\n\"));\n      state.awaitingUpload = true;\n      state.awaitingDuration = false;\n    } else {\n      tools.reply(\"Please specify a duration (e.g., '2 minutes', '30 seconds')\");\n    }\n    return;\n  }\n  \n  // Get summary preferences from user\n  if (state.awaitingSummaryPrefs && state.mode === 'summary') {\n    if (userResponse.includes('concise') || userResponse.includes('detailed')) {\n      state.summaryType = userResponse.includes('concise') ? 'concise' : 'detailed';\n      tools.reply([\n        \"Who is the intended audience for this summary?\",\n        \"- 'student' (simple language)\",\n        \"- 'professional' (formal language)\"\n      ].join(\"\\n\"));\n      state.awaitingAudience = true;\n      state.awaitingSummaryPrefs = false;\n    } else {\n      tools.reply(\"Please specify either 'concise' or 'detailed' for your summary type\");\n    }\n    return;\n  }\n  \n  // Get audience preference from user\n  if (state.awaitingAudience && state.mode === 'summary') {\n    if (userResponse.includes('student') || userResponse.includes('professional')) {\n      state.audience = userResponse.includes('student') ? 'student' : 'professional';\n      tools.reply([\n        `Got it! Generating a ${state.summaryType} summary for ${state.audience}s.`,\n        \"Please visit this link to upload your PDF:\",\n        \"https://brainrot-learning-4052.uc.r.appspot.com/\",\n        \"After uploading, come back here and type 'done' to get your summary.\"\n      ].join(\"\\n\"));\n      state.awaitingUpload = true;\n      state.awaitingAudience = false;\n    } else {\n      tools.reply(\"Please specify either 'student' or 'professional' for your audience\");\n    }\n    return;\n  }\n  \n  // After upload confirmation\n  if (state.awaitingUpload) {\n    if (userResponse === 'done') {\n      if (state.mode === 'conversation') {\n        tools.reply(\"Great! Generating your audio conversation now...\");\n        \n        // Simulate API call to get audio link\n        try {\n          const audioLink = \"https://brainrot-learning-4052.uc.r.appspot.com/download_audio\";\n          \n          tools.reply([\n            \"Your audio is ready!\",\n            `Duration: ${state.duration}`,\n            `Download link: ${audioLink}`,\n            \"Enjoy your learning experience!\"\n          ].join(\"\\n\"));\n        } catch (error) {\n          tools.reply(\"Sorry, there was an error generating your audio. Please try uploading again.\");\n        }\n      } else if (state.mode === 'summary') {\n        tools.reply(\"Generating your summary now...\");\n        \n        // Simulate API call to get summary\n        try {\n          const summaryLink = \"https://brainrot-learning-4052.uc.r.appspot.com/download_summary\";\n\n          tools.reply([\n            \"Your summary is ready!\",\n            `Type: ${state.summaryType}`,\n            `Audience: ${state.audience}`,\n            `Download link: ${summaryLink}`,\n            \"Enjoy your learning experience!\"\n          ].join(\"\\n\"));\n        } catch (error) {\n          console.error(\"Summary fetch error:\", error);\n          tools.reply(\"Sorry, there was an error generating your summary. Please try uploading again.\");\n        }\n      }\n      \n      // Reset state for new request\n      state.awaitingDuration = false;\n      state.awaitingUpload = false;\n      state.awaitingSummaryPrefs = false;\n      state.awaitingAudience = false;\n      state.awaitingChoice = true;\n      delete state.duration;\n      delete state.summaryType;\n      delete state.audience;\n      delete state.mode;\n    } else {\n      tools.reply(\"Please upload your PDF at https://brainrot-learning-4052.uc.r.appspot.com/ then type 'done' here.\");\n    }\n    return;\n  }\n}\n\nfunction unitTest(test, tools) {\n  test(\"Test conversation flow\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n  \n  test(\"Test summary flow\", 1, async (expect) => {\n    expect(true).toBeTrue();\n  });\n}","llmFunctions":[]}